<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2024/04/27/airbnb-javascript-style-guide/"/>
      <url>/2024/04/27/airbnb-javascript-style-guide/</url>
      
        <content type="html"><![CDATA[<p><a name="Vd7NX"></a></p><h1 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h1><p><a name="J8wsR"></a></p><h2 id="1-关于Object-prototype"><a href="#1-关于Object-prototype" class="headerlink" title="1.关于Object.prototype"></a>1.关于Object.prototype</h2><p>不要直接使用<code>Object.prototype</code>的方法,比如<code>hasOwnProperty</code><br>对于不继承原型的<code>Object.create(null)</code>对象,会报错<img src="https://cdn.nlark.com/yuque/0/2024/png/33630735/1714125533878-badd1f50-d276-45eb-a0be-d6dbb31f4bbe.png#averageHue=%231c1b1b&amp;clientId=u7d300114-c161-4&amp;from=paste&amp;height=146&amp;id=ud4fcf04d&amp;originHeight=146&amp;originWidth=429&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=14547&amp;status=done&amp;style=none&amp;taskId=ud1ab52b4-5710-4b2c-9917-65aa93894e1&amp;title=&amp;width=429" alt="image.png"><br>ES2022推出静态方法<a href="https://github.com/tc39/proposal-accessible-object-hasownproperty">Object.hasOwn()</a>,<br>Object.hasOwn()可以接受两个参数，第一个是所要判断的对象，第二个是属性名。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33630735/1714125615844-9effaf02-656f-4fab-86ad-61981c4feaae.png#averageHue=%23f1f4f8&amp;clientId=u7d300114-c161-4&amp;from=paste&amp;height=493&amp;id=u2a4de741&amp;originHeight=493&amp;originWidth=761&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=45314&amp;status=done&amp;style=none&amp;taskId=u7ee6febe-9a7d-4a61-b65f-df7b442cfcc&amp;title=&amp;width=761" alt="image.png"><br><a name="vEesf"></a></p><h2 id="2-浅拷贝"><a href="#2-浅拷贝" class="headerlink" title="2.浅拷贝"></a>2.浅拷贝</h2><p>使用…对象扩展 而非 <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign">Object.assign</a> 进行浅拷贝,使用剩余参数获取省略属性的对象</p><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// very bad</span></span><br><span class="line"><span class="keyword">const</span> original = { <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> };</span><br><span class="line"><span class="keyword">const</span> copy = <span class="title class_">Object</span>.<span class="title function_">assign</span>(original, { <span class="attr">c</span>: <span class="number">3</span> }); <span class="comment">// this mutates `original` ಠ_ಠ</span></span><br><span class="line"><span class="keyword">delete</span> copy.<span class="property">a</span>; <span class="comment">// so does this</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> original = { <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> };</span><br><span class="line"><span class="keyword">const</span> copy = <span class="title class_">Object</span>.<span class="title function_">assign</span>({}, original, { <span class="attr">c</span>: <span class="number">3</span> }); <span class="comment">// copy =&gt; { a: 1, b: 2, c: 3 }</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> original = { <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> };</span><br><span class="line"><span class="keyword">const</span> copy = { ...original, <span class="attr">c</span>: <span class="number">3</span> }; <span class="comment">// copy =&gt; { a: 1, b: 2, c: 3 }</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> { a, ...noA } = copy; <span class="comment">// noA =&gt; { b: 2, c: 3 }</span></span><br></pre></td></tr></tbody></table></figure><p><a name="msbQX"></a></p><h1 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h1><p>Array.from()方法用于将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括 ES6 新增的数据结构 Set 和 Map.所谓类似数组的对象，本质特征只有一点，即必须有length属性。因此，任何有length属性的对象，都可以通过Array.from()方法转为数组，而此时扩展运算符就无法转换。<br>第二个参数是map函数,第三个参数绑定this</p><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(arrayLike)</span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(arrayLike, mapFn)</span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(arrayLike, mapFn, thisArg)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><a name="ZuZTK"></a></p><h2 id="1-使用Array-from转换类数组对象"><a href="#1-使用Array-from转换类数组对象" class="headerlink" title="1.使用Array.from转换类数组对象"></a>1.使用Array.from转换类数组对象</h2><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arrLike = { <span class="number">0</span>: <span class="string">'foo'</span>, <span class="number">1</span>: <span class="string">'bar'</span>, <span class="number">2</span>: <span class="string">'baz'</span>, <span class="attr">length</span>: <span class="number">3</span> };</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> arr = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(arrLike);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> arr = <span class="title class_">Array</span>.<span class="title function_">from</span>(arrLike);</span><br></pre></td></tr></tbody></table></figure><p><a name="VbLov"></a></p><h2 id="2-map时用Array-from而非…"><a href="#2-map时用Array-from而非…" class="headerlink" title="2.map时用Array.from而非…"></a>2.map时用Array.from而非…</h2><p>避免创建中间数组</p><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> baz = [...foo].<span class="title function_">map</span>(bar);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> baz = <span class="title class_">Array</span>.<span class="title function_">from</span>(foo, bar);</span><br></pre></td></tr></tbody></table></figure><p><a name="yPJds"></a></p><h1 id="Destructuring"><a href="#Destructuring" class="headerlink" title="Destructuring"></a>Destructuring</h1><p><a name="fPUry"></a></p><h2 id="1-当接收和使用对象的多个属性使用对象结构"><a href="#1-当接收和使用对象的多个属性使用对象结构" class="headerlink" title="1.当接收和使用对象的多个属性使用对象结构"></a>1.当接收和使用对象的多个属性使用对象结构</h2><p>解构使您无需为这些属性创建临时引用，也无需重复访问该对象。</p><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getFullName</span>(<span class="params">user</span>) {</span><br><span class="line">  <span class="keyword">const</span> firstName = user.<span class="property">firstName</span>;</span><br><span class="line">  <span class="keyword">const</span> lastName = user.<span class="property">lastName</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">${firstName}</span> <span class="subst">${lastName}</span>`</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getFullName</span>(<span class="params">user</span>) {</span><br><span class="line">  <span class="keyword">const</span> { firstName, lastName } = user;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">${firstName}</span> <span class="subst">${lastName}</span>`</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getFullName</span>(<span class="params">{ firstName, lastName }</span>) {</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">${firstName}</span> <span class="subst">${lastName}</span>`</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><a name="Vf5NM"></a></p><h2 id="2-函数返回多个变量使用对象代替数组-取值时无需考虑顺序问题"><a href="#2-函数返回多个变量使用对象代替数组-取值时无需考虑顺序问题" class="headerlink" title="2.函数返回多个变量使用对象代替数组,取值时无需考虑顺序问题"></a>2.函数返回多个变量使用对象代替数组,取值时无需考虑顺序问题</h2><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">processInput</span>(<span class="params">input</span>) {</span><br><span class="line">  <span class="comment">// then a miracle occurs</span></span><br><span class="line">  <span class="keyword">return</span> [left, right, top, bottom];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// the caller needs to think about the order of return data</span></span><br><span class="line"><span class="keyword">const</span> [left, __, top] = <span class="title function_">processInput</span>(input);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">processInput</span>(<span class="params">input</span>) {</span><br><span class="line">  <span class="comment">// then a miracle occurs</span></span><br><span class="line">  <span class="keyword">return</span> { left, right, top, bottom };</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// the caller selects only the data they need</span></span><br><span class="line"><span class="keyword">const</span> { left, top } = <span class="title function_">processInput</span>(input);</span><br></pre></td></tr></tbody></table></figure><p><a name="Tiwok"></a></p><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p><a name="uCM5M"></a></p><h2 id="1-不要链式声明变量"><a href="#1-不要链式声明变量" class="headerlink" title="1.不要链式声明变量"></a>1.不要链式声明变量</h2><p>会隐式产生全局变量  </p><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">(<span class="keyword">function</span> <span class="title function_">example</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="comment">// JavaScript interprets this as</span></span><br><span class="line">  <span class="comment">// let a = ( b = ( c = 1 ) );</span></span><br><span class="line">  <span class="comment">// The let keyword only applies to variable a; variables b and c become</span></span><br><span class="line">  <span class="comment">// global variables.</span></span><br><span class="line">  <span class="keyword">let</span> a = b = c = <span class="number">1</span>;</span><br><span class="line">}());</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// throws ReferenceError</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">(<span class="keyword">function</span> <span class="title function_">example</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> b = a;</span><br><span class="line">  <span class="keyword">let</span> c = a;</span><br><span class="line">}());</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// throws ReferenceError</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// throws ReferenceError</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c); <span class="comment">// throws ReferenceError</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// the same applies for `const`</span></span><br></pre></td></tr></tbody></table></figure><p><a name="Mq1ob"></a></p><h1 id="Hoisting"><a href="#Hoisting" class="headerlink" title="Hoisting"></a>Hoisting</h1><p><a name="ZEVtg"></a></p><h2 id="1-var变量提升"><a href="#1-var变量提升" class="headerlink" title="1.var变量提升"></a>1.var变量提升</h2><p>var 声明被提升到最接近的封闭函数作用域的顶部，但它们的赋值却没有。 const 和 let 声明有一个名为临时死区 (TDZ) 的新概念。了解为什么 typeof 不再安全很重要<br><a name="e0sSH"></a></p><h2 id="2-函数提升"><a href="#2-函数提升" class="headerlink" title="2.函数提升"></a>2.函数提升</h2><p>匿名函数表达式会提升其变量名称，但不会提升函数赋值</p><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">example</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(anonymous); <span class="comment">// =&gt; undefined</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">anonymous</span>(); <span class="comment">// =&gt; TypeError anonymous is not a function</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> anonymous = <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'anonymous function expression'</span>);</span><br><span class="line">  };</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>具名函数表达式提升变量名称，而不是函数名称或函数体</p><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">example</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(named); <span class="comment">// =&gt; undefined</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">named</span>(); <span class="comment">// =&gt; TypeError named is not a function</span></span><br><span class="line"></span><br><span class="line">  superPower(); <span class="comment">// =&gt; ReferenceError superPower is not defined</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> named = <span class="keyword">function</span> <span class="title function_">superPower</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'Flying'</span>);</span><br><span class="line">  };</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// the same is true when the function name</span></span><br><span class="line"><span class="comment">// is the same as the variable name.</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">example</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(named); <span class="comment">// =&gt; undefined</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">named</span>(); <span class="comment">// =&gt; TypeError named is not a function</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> named = <span class="keyword">function</span> <span class="title function_">named</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'named'</span>);</span><br><span class="line">  };</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>函数式声明会提升名称和函数体</p><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">example</span>(<span class="params"></span>) {</span><br><span class="line">  superPower(); <span class="comment">// =&gt; Flying</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">superPower</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'Flying'</span>);</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><a name="zNjP8"></a></p><h1 id="比较操作符和相等"><a href="#比较操作符和相等" class="headerlink" title="比较操作符和相等"></a>比较操作符和相等</h1><p><a name="UZIO2"></a></p><h2 id="1-if的规则"><a href="#1-if的规则" class="headerlink" title="1.if的规则"></a>1.if的规则</h2><p>条件语句（例如 if 语句）使用 ToBoolean 抽象方法的强制转换来评估其表达式，并始终遵循以下简单规则:<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33630735/1714136368833-14b5afec-cd90-48fb-b9d9-6f317e11a068.png#averageHue=%23fdfbf9&amp;clientId=u0adce14a-194b-4&amp;from=paste&amp;height=228&amp;id=u50f7f783&amp;originHeight=228&amp;originWidth=606&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=33339&amp;status=done&amp;style=none&amp;taskId=u7cbe78bb-32f7-4356-8f5d-2ffa54385d1&amp;title=&amp;width=606" alt="image.png"></p><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ([<span class="number">0</span>] &amp;&amp; []) {</span><br><span class="line">  <span class="comment">// true</span></span><br><span class="line">  <span class="comment">// an array (even an empty one) is an object, objects will evaluate to true</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><a name="NNmOH"></a></p><h2 id="2-空值合并"><a href="#2-空值合并" class="headerlink" title="2.空值合并  ??"></a>2.空值合并  ??</h2><p>它通过区分 null/undefined 与其他虚假值来提供精度，从而增强代码清晰度和可预测性</p><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> value = <span class="number">0</span> ?? <span class="string">'default'</span>;</span><br><span class="line"><span class="comment">// returns 0, not 'default'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> value = <span class="string">''</span> ?? <span class="string">'default'</span>;</span><br><span class="line"><span class="comment">// returns '', not 'default'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> value = <span class="literal">null</span> ?? <span class="string">'default'</span>;</span><br><span class="line"><span class="comment">// returns 'default'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> user = {</span><br><span class="line">  <span class="attr">name</span>: <span class="string">'John'</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="literal">null</span></span><br><span class="line">};</span><br><span class="line"><span class="keyword">const</span> age = user.<span class="property">age</span> ?? <span class="number">18</span>;</span><br><span class="line"><span class="comment">// returns 18</span></span><br></pre></td></tr></tbody></table></figure><p><a name="KCVdG"></a></p><h1 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h1><p><a name="MhDyr"></a></p><h2 id="1-parseInt达到性能瓶颈时"><a href="#1-parseInt达到性能瓶颈时" class="headerlink" title="1.parseInt达到性能瓶颈时"></a>1.parseInt达到性能瓶颈时</h2><p>使用&gt;&gt;0来转换数字</p><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * parseInt was the reason my code was slow.</span></span><br><span class="line"><span class="comment"> * Bitshifting the String to coerce it to a</span></span><br><span class="line"><span class="comment"> * Number made it a lot faster.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> val = inputValue &gt;&gt; <span class="number">0</span>;</span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/33630735/1714137617757-b08cd8a6-be3e-48f1-9bd6-a3ec70617a02.png#averageHue=%23fafbd4&amp;clientId=u0adce14a-194b-4&amp;from=paste&amp;height=258&amp;id=u3dddf5d7&amp;originHeight=258&amp;originWidth=792&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=44196&amp;status=done&amp;style=none&amp;taskId=u408fbe27-6ae8-473f-a35e-238e8751eab&amp;title=&amp;width=792" alt="image.png"><br><a name="jbVRQ"></a></p><h2 id="2-转换成布尔值"><a href="#2-转换成布尔值" class="headerlink" title="2.转换成布尔值"></a>2.转换成布尔值</h2><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> age = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> hasAge = <span class="keyword">new</span> <span class="title class_">Boolean</span>(age);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> hasAge = <span class="title class_">Boolean</span>(age);</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="keyword">const</span> hasAge = !!age;</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/04/27/hello-world/"/>
      <url>/2024/04/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
